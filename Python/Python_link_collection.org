#+TITLE: Python
#+AUTHOR: Konrad U. Förstner

* Why Python

Python is powerful general purpose language used by companies like
[[http://quintagroup.com/cms/python/google][Google]] and [[https://www.infoworld.com/article/2613828/python/why-netflix-is-embracing-python-over-java.html][Netflix]] as well as research institutions like NASA and
[[https://www.infoworld.com/article/2613828/python/why-netflix-is-embracing-python-over-java.html][CERN]]. It is very expressive and due does usually not need much
boilerplate code.

* Introduction for beginner without programming experiences
- [[http://journals.plos.org/ploscompbiol/article?id%3D10.1371/journal.pcbi.1004867][An Introduction to Programming for Bioscientists: A Python-Based Primer]]
- [[https://docs.python.org/3/][The official documentation]]
- [[http://www.diveintopython3.net/][Dive Into Python 3]]
* Further link for beginners
- [[https://realpython.com/python-string-formatting/][Python string formatting]]
* Add an entry point 

- https://en.wikipedia.org/wiki/Entry_point
- https://realpython.com/python-main-function/
- use a main() funtion on to


#+begin_src 
def main():
   real_stuff_one()
   read_stuff_two()

def real_stuff_one():
    pass

def real_stuff_two():
    pass

if __name__ == "__main__":
    main()
#+end_src

* Object Oriented Programming
- Video: [[https://www.youtube.com/watch?v=ZDa-Z5JzLYM][Python OOP Tutorial 1: Classes and Instances]]
* Testing

- [[https://docs.pytest.org/en/latest/][pytest]]
  - [[https://www.youtube.com/watch?v%3DUPanUFVFfzY][Introduction to Unit Testing in Python with Pytest - PyCon 2016]]
- Cognitive load - small functions - unit testing
- http://docs.pytest.org/en/latest/
- Keep in mind that you should use numpy.testing for numpy data structures
- [[https://realpython.com/python-continuous-integration/][Continuous Integration with Python: An Introduction]]
- [[https://www.olivierverdier.com/posts/2015/04/10/testing-scientific-computing/][Testing in Python for Scientific Computing]]
- [[https://www.youtube.com/watch?v%3DyACtdj1_IxE][Best Testing Practices for Data Science (Eric J Ma, PyCon 2017, Video)]]
- SWC - [[https://katyhuff.github.io/python-testing/][Python Testing and Continuous Integration]]
- [[https://github.com/joeyespo/pytest-watch][pytest-watch - Continuous pytest runner]]
- [[http://pythontesting.net/agile/test-first-programming/][Test First Programming / Test First Development]]

** Levels
- Unit testin
- Integration testing
- System testing


Regression testing in all levels


** Sources

- http://pythontesting.net/
  - Discussion of the different levels http://pythontesting.net/podcast/27-mahmoud-hashemi-unit-integration-system-testing/

* Best practices 
- [[https://www.python.org/dev/peps/pep-0008/][PEP 8 - Style Guide for Python Code]]
- Video: [[https://www.youtube.com/watch?v%3DOSGv2VnC0go][Transforming Code into Beautiful, Idiomatic Python]]
- [[https://access.redhat.com/blogs/766093/posts/2802001][Pythonic code review]]
- [[https://gist.github.com/JeffPaine/6213790][Transforming Code into Beautiful, Idiomatic Python]]
- [[http://treyhunner.com/2017/07/craft-your-python-like-poetry/][Craft Your Python Like Poetry]]
- Use key word parameters instead of positional parameters
* Packaging
- [[https://packaging.python.org/][Python Packaging User Guide]]
- [[https://sourcery.ai/blog/python-best-practices/][How to set up a perfect Python project]]
- [[https://python-packaging.readthedocs.io/][How To Package Your Python Code]]
- https://conda.io/
- https://bioconda.github.io/
- https://medium.com/small-things-about-python/lets-talk-about-python-packaging-6d84b81f1bb5#.vumtjvmgt
- https://python-packaging.readthedocs.io/en/latest/index.html
- http://blog.securem.eu/tips%20and%20tricks/2016/02/29/creating-and-publishing-a-python-module/
- [[https://github.com/audreyr/cookiecutter-pypackage][Cookiecutter template for a Python package]]
- [[https://jonemo.github.io/neubertify/2017/09/13/publishing-your-first-pypi-package/][Publishing your First PyPI Package by/for the Absolute Beginner]]
- [[https://pipenv.readthedocs.io/en/latest/][Pipenv: Python Dev Workflow for Humans]]
** Conda
- [[https://conda.io/docs/_downloads/conda-cheatsheet.pdf][Conda Cheatsheet]]
- [[https://jakevdp.github.io/blog/2016/08/25/conda-myths-and-misconceptions/][Conda: Myths and Misconceptions]]

* IDEs for Python
- [[https://www.jetbrains.com/pycharm/][PyCharm]]
- [[https://elpy.readthedocs.io][elpy]] (for Emacs)
- [[https://realpython.com/blog/python/vim-and-python-a-match-made-in-heaven/][VIM and Python - a Match Made in Heaven]]
- [[https://pythonhosted.org/spyder/][Spyder]]
* Important packages
- http://biopython.org/
  - [[http://biopython.org/DIST/docs/tutorial/Tutorial.html][Biopython Tutorial and Cookbook]]
- [[http://www.numpy.org/][Numpy]]
- [[https://www.scipy.org/scipylib/index.html][SciPy]]
- [[http://pandas.pydata.org/][Pandas]]
  - [[https://pandas.pydata.org/pandas-docs/stable/10min.html][10 Minutes to pandas]]
  - [[https://github.com/pandas-dev/pandas/blob/master/doc/cheatsheet/Pandas_Cheat_Sheet.pdf][Pandas cheat sheet]]
  - Podcast: https://www.podcastinit.com/episode-98-pandas-with-jeff-reback/
  - Videos:
    - [[https://www.youtube.com/watch?v%3D9d5-Ti6onew][A Visual Guide To Pandas]]
    - [[http://pbpython.com/pandas-grouper-agg.html][Pandas Grouper and Agg Functions Explained]]
  - [[https://engineering.upside.com/a-beginners-guide-to-optimizing-pandas-code-for-speed-c09ef2c6a4d6][A Beginner’s Guide to Optimizing Pandas Code for Speed]]
  - [[https://medium.com/dunder-data/how-to-learn-pandas-108905ab4955][How to Learn Pandas]]
- pomegranate - https://pomegranate.readthedocs.io Fast, flexible and easy to use probabilistic modelling in Python;
  For Hidden-Markov-Model, Finite State Machines etc:
- statsmodels.sourceforge.net  
- [[https://csvkit.readthedocs.io/][csvkit]]

* Book recommendations
  - [[http://shop.oreilly.com/product/0636920032519.do][Fluent Python]]
* Intermedite / Advanced
- List comprehension
- Decorators
- Type hinting (starting from 3.5)
  - https://www.blog.pythonlibrary.org/2016/01/19/python-3-an-intro-to-type-hinting/
- Video: [[https://www.youtube.com/watch?v%3D7lmCu8wz8ro][James Powell - What Does It Take To Be An Expert At Python?]]
  - [[https://nbviewer.jupyter.org/github/austin-taylor/code-vault/blob/master/python_expert_notebook.ipynb][Notebook based on the talk]]
* Code documentation
- [[http://www.sphinx-doc.org][Sphinx]]
- [[https://realpython.com/documenting-python-code/][Documenting Python Code: A Complete Guide]]
* Debugging / Code checking
- [[http://flake8.pycqa.org/en/latest/][flake8]]
- [[https://www.pylint.org/][pylint]]
- [[https://pycodestyle.readthedocs.io][pycodestyle]] (previous known as pep8) 
- [[pycodestyle][vulture]] - Find dead code 
- [[https://docs.python.org/3.6/library/pdb.html][pdb]]
- [[https://documen.tician.de/pudb/][PuDB]] is a full-screen, console-based visual debugger for Python
- [[https://python-hunter.readthedocs.io][Hunter]]
* Cheat Sheets
- https://perso.limsi.fr/pointal/_media/python:cours:mementopython3-english.pdf
- 
* Environments

- "The pyvenv script has been deprecated as of Python 3.6 in favor of
  using python3 -m venv to help prevent any potential confusion as to
  which Python interpreter a virtual environment will be based on."
  https://docs.python.org/3/library/venv.html
- http://masnun.com/2016/04/10/python-pyenv-pyvenv-virtualenv-whats-the-difference.html

* Misc/Unsorted links
- write a ~main~ function => get an overview
- https://www.python.org/dev/peps/pep-0008/
- [[https://inventwithpython.com/blog/2018/08/17/the-zen-of-python-explained/][The Zen of Python, Explained]]
- [[http://docs.python-guide.org/en/latest/writing/structure/][How to organize a Python package]]
- [[https://medium.com/@bfortuner/python-multithreading-vs-multiprocessing-73072ce5600b][Intro to Threads and Processes in Python]]
- https://en.wikipedia.org/wiki/Syntactic_sugar
- Use Python 3 http://pythonclock.org/
- Scientific Python Cheat Sheet https://github.com/IPGP/scientific_python_cheat_sheet
- [[https://www.youtube.com/watch?v%3Do9pEzgHorH0][Talk - Stop Writing Classes]]
- [[https://pypi.python.org/pypi/pyformat][pyformat]] 
- http://www.pythontutor.com/
- [[https://realpython.com/run-python-scripts/][How to Run Your Python Scripts]]
- http://pep8.org/
- [[https://www.nature.com/articles/d41586-019-00653-5][The ten commandments for learning how to code]]
* Podcasts
- [[https://talkpython.fm/][Talk Python to me]]
  - Episode #100: Python past, present, and future with Guido van Rossum https://talkpython.fm/episodes/show/100/python-past-present-and-future-with-guido-van-rossum
- https://www.podcastinit.com
* Videos 
- [[https://www.youtube.com/watch?v%3DOSGv2VnC0go][Transforming Code into Beautiful, Idiomatic Python]]
- [[https://www.youtube.com/watch?v%3Dwf-BqAjZb8M][Beyond PEP 8 -- Best practices for beautiful intelligible code]]

* Books
- Fluent Python
